#云编译公用核心
name: UBOOT-CORE

on:
  workflow_call:
    inputs:
      UB_BRANCH:
        required: true
        type: string
      UB_TARGET:
        required: true
        type: string
      UB_URL:
        required: true
        type: string
      UB_ATF:
        required: true
        type: string
      UB_MTK:
        required: true
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  UB_BRANCH: ${{inputs.UB_BRANCH}}
  UB_TARGET: ${{inputs.UB_TARGET}}
  UB_URL: ${{inputs.UB_URL}}
  UB_ATF: ${{inputs.UB_ATF}}
  UB_MTK: ${{inputs.UB_MTK}}

jobs:
  ub_core:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt -yqq update
          sudo -E apt -yqq purge $(sed -n "1{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq install $(sed -n "2{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo -E rm -rf $(sed -n "3{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)

      - name: Initialization Values
        run: |
          export UB_DATE=$(TZ=UTC-8 date +"%y.%m.%d")
          export UB_SOURCE=$(echo $UB_URL | cut -d '/' -f 5-)
          export UB_ATF_VER=$(echo $UB_ATF | grep -oP 'atf-\d+')
          export UB_MTK_VER=$(echo $UB_MTK | grep -oP 'mtk-\d+')
          export UB_MULTI_TYPE=$(sed -n "2{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/Uboots.sh)
          export UB_SINGLE_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/Uboots.sh)

          echo "UB_ATF=$UB_ATF" >> $GITHUB_ENV
          echo "UB_ATF_VER=$UB_ATF_VER" >> $GITHUB_ENV
          echo "UB_MTK=$UB_MTK" >> $GITHUB_ENV
          echo "UB_MTK_VER=$UB_MTK_VER" >> $GITHUB_ENV
          echo "UB_DATE=$UB_DATE" >> $GITHUB_ENV
          echo "UB_SOURCE=$UB_SOURCE" >> $GITHUB_ENV
          echo "UB_TARGET=$UB_TARGET" >> $GITHUB_ENV
          echo "UB_MULTI_TYPE=$UB_MULTI_TYPE" >> $GITHUB_ENV
          echo "UB_SINGLE_TYPE=$UB_SINGLE_TYPE" >> $GITHUB_ENV

      - name: Clone UBOOT Code
        run: |
          git clone --depth=1 --single-branch --branch "$UB_BRANCH" $UB_URL ./uboot

      - name: Check Scripts
        run: |
          find ./ -maxdepth 2 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Modified Version
        run: |
          cd ./uboot

          sed -i "5s/UBOOT_DIR=.*/UBOOT_DIR=$UB_MTK/" ./build.sh
          sed -i "7s/ATF_DIR=.*/ATF_DIR=$UB_ATF/" ./build.sh

      - name: Compile Firmware
        run: |
          cd ./uboot

          $GITHUB_WORKSPACE/Uboots.sh

      - name: Machine Information
        run: |
          cd ./uboot

          echo "======================="
          lscpu | egrep 'Model name|Core|Thread'
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./uboot && mkdir ./upload

          for file in $(find ./output/ -type f -iname "*.*") ; do
            export ext=$(basename "$file" | cut -d '.' -f 2-)
            export name=$(basename "$file" | cut -d '.' -f 1)
            export new_file="$name"_"$UB_DATE"."$ext"
            mv -f "$file" ./upload/"$new_file"
          done

      - name: Release Firmware
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.UB_ATF_VER}}_${{env.UB_MTK_VER}}_${{env.UB_DATE}}
          files: ./uboot/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，更就完事了！

            源码：${{env.UB_SOURCE}}
            平台：${{env.UB_TARGET}}
            ATF版本：${{env.UB_ATF}}
            MTK版本：${{env.UB_MTK}}
            单分区设备：${{env.UB_SINGLE_TYPE}}
            多分区设备：${{env.UB_MULTI_TYPE}}

      - name: Delete Old Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 2
          delete_tags: true

      - name: Delete Old Workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 1
