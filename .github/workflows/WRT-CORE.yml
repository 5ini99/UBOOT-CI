#云编译公用核心
name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_BRANCH:
        required: true
        type: string
      WRT_TARGET:
        required: true
        type: string
      WRT_URL:
        required: true
        type: string
      WRT_ATF:
        required: true
        type: string
      WRT_MTK:
        required: true
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_TARGET: ${{inputs.WRT_TARGET}}
  WRT_URL: ${{inputs.WRT_URL}}
  WRT_ATF: ${{inputs.WRT_ATF}}
  WRT_MTK: ${{inputs.WRT_MTK}}

jobs:
  wrt_core:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt -yqq update
          sudo -E apt -yqq purge $(sed -n "1{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq install $(sed -n "2{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo -E rm -rf $(sed -n "3{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)

      - name: Initialization Values
        run: |
          export WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d")
          export WRT_SOURCE=$(echo $WRT_URL | cut -d '/' -f 5-)
          export WRT_ATF_VER=$(echo $WRT_ATF | grep -oP 'atf-\d+')
          export WRT_MTK_VER=$(echo $WRT_MTK | grep -oP 'mtk-\d+')
          export WRT_MULTI_TYPE=$(sed -n "2{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/Uboots.sh)
          export WRT_SINGLE_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/Uboots.sh)

          echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
          echo "WRT_SOURCE=$WRT_SOURCE" >> $GITHUB_ENV
          echo "WRT_ATF_VER=$WRT_ATF_VER" >> $GITHUB_ENV
          echo "WRT_MTK_VER=$WRT_MTK_VER" >> $GITHUB_ENV
          echo "WRT_MULTI_TYPE=$WRT_MULTI_TYPE" >> $GITHUB_ENV
          echo "WRT_SINGLE_TYPE=$WRT_SINGLE_TYPE" >> $GITHUB_ENV

      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_URL ./wrt/

      - name: Check Scripts
        run: |
          find ./ -maxdepth 2 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Modified Version
        run: |
          cd ./wrt/

          sed -i "5s/WRTOOT_DIR=.*/WRTOOT_DIR=$WRT_MTK/" ./build.sh
          sed -i "7s/ATF_DIR=.*/ATF_DIR=$WRT_ATF/" ./build.sh

      - name: Compile Firmware
        run: |
          cd ./wrt/

          $GITHUB_WORKSPACE/Uboots.sh

      - name: Machine Information
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | egrep "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./wrt/ && mkdir ./upload/

          for FILE in $(find ./output/ -type f -iname "*.*") ; do
            EXT=$(basename $FILE | cut -d '.' -f 2-)
            NAME=$(basename $FILE | cut -d '.' -f 1)
            NEW_FILE="$NAME"_"$WRT_DATE"."$EXT"
            mv -f $FILE ./upload/$NEW_FILE
          done

      - name: Release Firmware
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.WRT_ATF_VER}}_${{env.WRT_MTK_VER}}_${{env.WRT_DATE}}
          files: ./wrt/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，更就完事了！

            源码：${{env.WRT_SOURCE}}
            平台：${{env.WRT_TARGET}}
            ATF版本：${{env.WRT_ATF}}
            MTK版本：${{env.WRT_MTK}}
            单分区设备：${{env.WRT_SINGLE_TYPE}}
            多分区设备：${{env.WRT_MULTI_TYPE}}
